module Applib.Resource.Traits.Transferability;

import Stdlib.Prelude open;
import Stdlib.Trait.Ord.Eq open using {fromOrdToEq};

module Transferability;
  type Transferability :=
    | NonTransferable
    | Transferable;

  fromBool (isTransferable : Bool) : Transferability :=
    case isTransferable of
      | true := Transferable
      | false := NonTransferable;

  toBool (transferability : Transferability) : Bool :=
    case transferability of
      | Transferable := true
      | NonTransferable := false;
end;

open Transferability using {
  Transferability;
  NonTransferable;
  Transferable;
} public;

instance
Transferability-Ord : Ord Transferability :=
  -- lexicographical ordering
  mkOrd@{
    cmp (t1 t2 : Transferability) : Ordering :=
      case t1, t1 of
        | Transferable, Transferable := Equal
        | NonTransferable, NonTransferable := Equal
        | NonTransferable, Transferable := LessThan
        | Transferable, NonTransferable := GreaterThan;
  };

instance
Transferability-Eq : Eq Transferability := fromOrdToEq;

instance
Transferability-Show : Show Transferability :=
  mkShow
    \{eph :=
      case eph of
        | NonTransferable := "NonTransferable"
        | Transferable := "Transferable"};

trait
type HasTransferability ResourceT :=
  mkHasTransferability@{
    get : ResourceT -> Transferability;
    set : Transferability -> ResourceT -> ResourceT;
  };
