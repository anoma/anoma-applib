module Applib.Resource.Traits.Owner;

import Stdlib.Prelude open;
import Stdlib.Data.Set as Set open;

import Anoma.Resource open;
import Anoma.Identity.External open;
import Anoma.Builtin.System open;

import Applib.Authorization.Identities open;
import Applib.Resource.Traits.ValueMap open;
import Applib.Resource.Standards.ValueMap open;
import Applib.Resource.Standards.Ownership open;

trait
type HasOwner ResourceT :=
  mkHasOwner@{
    get : ResourceT -> ExternalIdentity;
    set : ExternalIdentity -> ResourceT -> ResourceT
  };

instance
Resource-HasOwner : HasOwner Resource :=
  mkHasOwner@{
    --- Returns the owner ;ExternalIdentity; of the resource or the zero ;ExternalIdentity;.
    --- @param resource The ;Resource; to return the owner of.
    --- @return The owner ;ExternalIdentity;.
    get (resource : Resource) : ExternalIdentity :=
      case
        lookupValueMapMaybe@{
          key := ownershipStandardKey;
          valueMap := HasValueMap.get resource
        }
      of
        | just value := anomaDecode value
        | nothing := Zero.externalIdentity;

    --- Sets the owner ;ExternalIdentity; of a resource.
    --- @param owner The owner to set.
    --- @param resource The resource to set the owner for.
    --- @return The updated resource.
    set (owner : ExternalIdentity) (resource : Resource) : Resource :=
      HasValueMap.set
        Set.insert@{
          elem :=
            mkValueMapEntry@{
              key := ownershipStandardKey;
              value := toValueMapValue owner
            };
          set := HasValueMap.get resource
        }
        resource
  };
