module Applib.Resource.Standards.ValueMap;

import Stdlib.Prelude open;
import Stdlib.Debug.Fail open;
import Stdlib.Data.Map as Map open using {Map};
import Anoma.Builtin.System open;

type ValueMapKey :=
  mkValueMapKey@{
    unValueMapKey : Nat;
  };
-- Could be a different type (e.g., sha256 hash)

type ValueMapValue :=
  mkValueMapValue@{
    unValueMapValue : Nat;
  };

toValueMapKey {A} (argument : A) : ValueMapKey :=
  argument |> anomaEncode |> mkValueMapKey;

fromValueMapKey {A} (key : ValueMapKey) : A :=
  key |> ValueMapKey.unValueMapKey |> anomaDecode;

toValueMapValue {A} (argument : A) : ValueMapValue :=
  argument |> anomaEncode |> mkValueMapValue;

fromValueMapValue {A} (value : ValueMapValue) : A :=
  value |> ValueMapValue.unValueMapValue |> anomaDecode;

ValueMap : Type := Map ValueMapKey ValueMapValue;

deriving instance
ValueMapKey-Ord : Ord ValueMapKey;

deriving instance
ValueMapKey-Eq : Eq ValueMapKey;

deriving instance
ValueMapValue-Ord : Ord ValueMapValue;

deriving instance
ValueMapValue-Eq : Eq ValueMapValue;
