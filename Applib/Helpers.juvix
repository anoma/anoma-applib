module Applib.Helpers;

import Stdlib.Prelude open;
import Stdlib.Debug.Fail open using {failwith};

import Applib.Data.TxContext open public;
import Applib.Identities open;
import Stdlib.Data.Set as Set open using {Set; insert; union; isMember};
import Applib.Trait.Tx open public;
import Stdlib.Data.Map as Map open using {Map};
import Anoma open;
import Anoma.Builtin.ByteArray open;
import Anoma.Builtin.System open;
import Mtl open hiding {Identity};

isNullifierPresent
  (nullifier : Nullifier) (nullifierSet : Set Nullifier) : Bool :=
  Set.isMember nullifier nullifierSet;

mkActionHelper
  {M : Type -> Type}
  {{Tx M}}
  {{Monad M}}
  (consumed created : List Resource)
  (appData : AppData)
  : M Action :=
  do {
    env <- getTxContext;
    let
      root := TxContext.currentRoot env;
    in
    pure
      Action.create@{
        consumed :=
          map (RootedNullifiableResource.Transparent.mk root) consumed;
        created := created;
        appData;
      };
  };

mkTransactionHelper
  (roots : List CommitmentRoot) (actions : List Action) : Transaction :=
  Transaction.mk@{
    roots := AnomaSet.fromList roots;
    actions := AnomaSet.fromList actions;
  };

emptyTx : Transaction :=
  mkTransactionHelper@{
    roots := [];
    actions := [];
  };

--- Create a ;Transaction; with ;Action;s that do not use
--- the proof ;Instance; publicData field
mkTransactionNoPublicData
  {M : Type -> Type}
  {{Tx M}}
  {{Monad M}}
  (consumed created : List Resource)
  : M Transaction :=
  do {
    si <- getTxContext;
    a <- mkActionHelper consumed created AppData.empty;
    pure
      mkTransactionHelper@{
        roots := [TxContext.currentRoot si];
        actions := [a];
      };
  };

--- A helper function preparing the transaction object by creating an action object
--- containing data required by counter resources.
--- @param standardInputs The transaction function standard inputs.
--- @param consumed The consumed resources.
--- @param created The created resources.
--- @return The transaction object.
prepareStandardTransaction
  {M : Type -> Type}
  {{Tx M}}
  {{Monad M}}
  (consumed created : List Resource)
  (appData : AppData)
  : M Transaction :=
  do {
    si <- getTxContext;
    a <- mkActionHelper consumed created appData;
    pure
      mkTransactionHelper@{
        roots := [TxContext.currentRoot si];
        actions := [a];
      };
  };

composeAll (txs : List Transaction) : Transaction :=
  for (acc := emptyTx) (tx in txs) {
    Transaction.compose acc tx
  };

fromResult
  {ErrorType}
  {DataType}
  {{Show ErrorType}}
  (result : Result ErrorType DataType)
  : DataType :=
  case result of
    | ok data := data
    | error err := failwith (Show.show err);
