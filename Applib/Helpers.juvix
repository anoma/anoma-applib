module Applib.Helpers;

import Stdlib.Prelude open;
import Stdlib.Debug.Fail open using {failwith};

import Applib.Identities open;
import Stdlib.Data.Set as Set open using {Set; empty; insert; union; isMember};
import Stdlib.Data.Map as Map open using {Map};
import Anoma open;
import Anoma.State open;
import Anoma.Builtin.ByteArray open;
import Anoma.Builtin.System open;
import BaseLayer.ResourceMachine as BaseLayer;

import Applib.Resource.Traits.Convertable open;

findResourceByNullifier
  (nf : Nat) (privateInputs : BaseLayer.Witness) : Maybe Resource :=
  let
    hasNullifier (nf : Nat) (r : Resource) : Bool := BaseLayer.nullifier r == nf;
    getConsumed (nf : Nat) : Maybe Resource :=
      find (hasNullifier nf) (BaseLayer.Witness.consumed privateInputs);
  in getConsumed nf;

findResourceByCommitment
  (cm : Nat) (privateInputs : BaseLayer.Witness) : Maybe Resource :=
  let
    hasCommitment (cm : Nat) (r : Resource) : Bool := BaseLayer.commitment r == cm;
    getCreated (cm : Nat) : Maybe Resource :=
      find (hasCommitment cm) (BaseLayer.Witness.created privateInputs);
  in getCreated cm;

type ResourceStatus :=
  | NonExisting
  | CreatedRes Resource
  | ConsumedRes Resource;

findResource (tag : Nat) (privateInputs : BaseLayer.Witness) : ResourceStatus :=
  case findResourceByNullifier tag privateInputs of
    | just consumed := ConsumedRes consumed
    | nothing :=
      case findResourceByCommitment tag privateInputs of
        | just created := CreatedRes created
        | nothing := NonExisting;

isNullifierPresent
  (nullifier : Nullifier) (nullifierSet : Set Nullifier) : Bool :=
  Set.isMember nullifier nullifierSet;

toAppDataEntry
  {Key Data : Type}
  (key : Key)
  (data : Data)
  {deletionCriterion : DeletionCriterion := StoreForever}
  : Pair AppDataKey AppDataValue :=

  mkAppDataKey@{
    unAppDataKey := anomaEncode key;
  }
    , mkAppDataValue@{
        data := anomaEncode data;
        deletionCriterion;
      };
--- Standard inputs to for transaction functions.
--- NOTE: In the future, this will include more settings such as the information flow control flag.
type StandardInputs :=
  mkStandardInputs@{
    caller : Identity;
    currentRoot : CommitmentTree.Root;
    randSeed : RandSeed;
  };

mkActionHelper
  (consumed created : List Resource) {app-data : Nat := 0} : Action :=
  let
    nullifiers := map BaseLayer.nullifier consumed;
    commitments := map BaseLayer.commitment created;
    all-resources := zip consumed nullifiers ++ zip created commitments;

    public-inputs : Nat -> BaseLayer.Instance
      | tag :=
        BaseLayer.mkInstance@{
          commitments;
          nullifiers;
          tag;
          app-data;
        };

    private :=
      BaseLayer.mkWitness@{
        created;
        consumed;
        customInputs := 0;
      };
    -- Compute proofs
    logicProofs : List BaseLayer.Proof :=
      map (resource, tag in all-resources) {
        BaseLayer.proofLogic resource (public-inputs tag, private)
      };
  in mkAction@{
       commitments;
       nullifiers;
       proofs := logicProofs;
       app-data;
     };

mkTransactionHelper
  {roots : List CommitmentTree.Root := []}
  (actions : List Action)
  : Transaction :=
  mkTransaction@{
    roots := map CommitmentTree.unRoot roots;
    actions;
    delta := BaseLayer.zeroDelta;
    deltaProof := 0;
  };

emptyTx : Transaction :=
  mkTransactionHelper@{
    roots := [];
    actions := [];
  };

--- A helper function preparing the transaction object by creating an action object
--- containing data required by counter resources.
--- @param standardInputs The transaction function standard inputs.
--- @param consumed The consumed resources.
--- @param created The created resources.
--- @return The transaction object.
prepareStandardTransaction
  (standardInputs : StandardInputs)
  (consumed created : List Resource)
  {app-data : Nat := 0}
  : Transaction :=
  mkTransactionHelper@{
    roots := [StandardInputs.currentRoot standardInputs];
    actions := [mkActionHelper consumed created {app-data}];
  };

composeAll (txs : Set Transaction) : Transaction :=
  for (acc := emptyTx) (tx in txs) {
    BaseLayer.compose acc tx
  };

fromResult
  {ErrorType}
  {DataType}
  {{Show ErrorType}}
  (result : Result ErrorType DataType)
  : DataType :=
  case result of
    | ok data := data
    | error err := failwith (Show.show err);
