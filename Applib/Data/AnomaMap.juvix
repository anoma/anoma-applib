module Applib.Data.AnomaMap;

import Stdlib.Prelude open;
import Stdlib.Data.Map as Map open using {Map};
import Anoma.Builtin.System open using {builtinAnomaEncode; builtinAnomaDecode};
import Anoma.Encode open;

module Private;
  type AnomaMap := mkAnoma (Map Nat Nat);

  open AnomaMap using {mkAnoma} public;
end;

open Private using {AnomaMap} public;

empty : AnomaMap := Private.mkAnoma Map.empty;

size : AnomaMap -> Nat
  | (Private.mkAnoma m) := Map.size m;

lookup {Key Value : Type} : Key -> AnomaMap -> Maybe (Encoded Value)
  | key (Private.mkAnoma a) :=
    Map.lookup (builtinAnomaEncode key) a |> map Encode.Internal.mkEncoded;

lookupDecode {Key Value : Type} (k : Key) (m : AnomaMap) : Maybe Value :=
  map decode (lookup k m);

insert {Key Value : Type} : Key -> Value -> AnomaMap -> AnomaMap
  | k v (Private.mkAnoma a) :=
    Private.mkAnoma
      (Map.insert (builtinAnomaEncode k) (builtinAnomaEncode v) a);
