module Applib.Authorization.Message;

import Stdlib.Prelude open;
import Stdlib.Data.Set as Set open using {Set};
import Stdlib.Data.Map as Map;
import Anoma open;
import Anoma.Builtin.System open;

import Applib.Helpers open;
import Applib.Identities open;

--- A message format specifiying resources that must be created and consumed within an ;Action;.
--- @param origin The reference to the resource performing the check.
--- @param mustBeConsumed The resources that must be consumed.
--- @param mustBeCreated The resources that must be created.
type ResourceRelationship :=
  mkResourceRelationship@{
    origin : Tag;
    mustBeConsumed : Set Nullifier;
    mustBeCreated : Set Commitment;
  };

--- Checks that a ;ResourceRelationship; message has the expected values.
--- @param message The resource relationship message to check.
--- @param origin The expected origin.
--- @param nullifiers The nullifier set that must contain the `mustBeConsumed` nullifiers as a subset.
--- @param commitments The commitment set that must contain the `mustBeCreated` commitments as a subset.
--- @return The check result.
checkResourceRelationship
  (message : ResourceRelationship)
  (origin : Tag)
  (nullifiers : Set Nullifier)
  (commitments : Set Commitment)
  : Bool :=
  ResourceRelationship.origin message == origin
    && Set.isSubset (ResourceRelationship.mustBeConsumed message) nullifiers
    && Set.isSubset (ResourceRelationship.mustBeCreated message) commitments;

--- Creates an ;AppData; entry consisting of a ;ResourceRelationship; message and corresponding ;Signature; as the ;AppDataValue; and the resource ;Tag; value as the ;AppDataKey;.
--- @param identity The identity to derive the nullifier key from.
--- @param origin The resource performing the check.
--- @param mustBeConsumed The resources that must be consumed.
--- @param mustBeCreated The resources that must be created.
--- @return The app data entry.
mkResourceRelationshipAppDataEntry
  (signer : InternalIdentity)
  (origin : Tag)
  (mustBeConsumed : Set Nullifier)
  (mustBeCreated : Set Commitment)
  : Pair AppDataKey AppDataValue :=
  let
    message : ResourceRelationship :=
      mkResourceRelationship@{
        origin;
        mustBeConsumed;
        mustBeCreated;
      };
    signature : Signature :=
      sign@{
        message;
        signer;
      };
  in case origin of
       | Created commitment :=
         toAppDataEntry@{
           key := commitment;
           data := message, signature;
         }
       | Consumed nullifier :=
         toAppDataEntry@{
           key := nullifier;
           data := message, signature;
         };

module ActionFromConvertable;
  import Applib.Resource.Traits.Convertable open;
  import Applib.Transaction.Traits open;

  --- Instantiates the ;ActionConvertable; trait with a parametrized function accepting `ConsumedTypedResource` and `CreatedTypedResource` being required to implement the ;Ord; and ;Convertable; traits.
  --- The underlying inmplementation converts the typed resources to standard ;Resource;s and creates an ;Action; with
  --- - authorization ;AppData; containing an ;AppData; entry for every consumed ;Resource;.
  --- - custom inputs (;CustomInputs;) containing entries mapping nullifiers to consumed resources and commitments to created resources.
  actionWithAuthorizationAppData
    {ConsumedTypedResource CreatedTypedResource}
    {{Ord ConsumedTypedResource}}
    {{Ord CreatedTypedResource}}
    {{Convertable ConsumedTypedResource}}
    {{Convertable CreatedTypedResource}}
    : ActionConvertable ConsumedTypedResource CreatedTypedResource :=
    mkActionConvertable@{
      toAction
        (standardInputs : StandardInputs)
        (consumedResources : Set ConsumedTypedResource)
        (createdResources : Set CreatedTypedResource)
        : Action :=
        let
          -- Convert typed resources to resources.
          consumed :=
            Set.map (r in consumedResources) {
              Convertable.toResource r
            };
          created :=
            Set.map (r in createdResources) {
              Convertable.toResource r
            };

          -- Put maps into the custom inputs that map:
          -- - nullifiers to consumed resources
          -- - commitments to created resources
          tagsAndCustomInputs :=
            computeTagsAndCustomInputs@{
              consumed;
              created;
            };
          tags := TagsAndCustomInputs.tags tagsAndCustomInputs;
          pair := tagsToPair tags;
          nullifiers := fst pair;
          commitments := snd pair;

          -- Put signed messages and signatures by the owner in the app data.
          -- The signed messages link back to the original consumed resources, where the signature verification is part of the resource logic requiring the commitments of created resources to be part of the action.
          appData :=
            Set.map (nullifier in nullifiers) {
                mkResourceRelationshipAppDataEntry@{
                  signer :=
                    Identity.internal (StandardInputs.caller standardInputs);
                  origin := Consumed nullifier;
                  mustBeConsumed := Set.empty;
                  mustBeCreated := commitments;
                }
              }
              |> Map.fromSet;
        in mkActionHelper@{
             consumed;
             created;
             appData;
             customInputs :=
               TagsAndCustomInputs.customInputs tagsAndCustomInputs;
             tags;
           };
    };
end;
