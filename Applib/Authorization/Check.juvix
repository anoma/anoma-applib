module Applib.Authorization.Check;

import Stdlib.Prelude open;

import Anoma open;
import Applib.Authorization.Message open;
import Applib.Helpers open;
import Stdlib.Data.Set as Set open using {Set};

--- Checks if an ;ExternalIdentity; has authorized the creation and consumption of ;Resource;s within the same ;Action; as the resource logic performing this check.
--- The check proceeds in five steps:
--- 1. The ;ResourceRelationship; message and corresponding ;Signature; are looked up in ;AppData; with the ;Tag; of the checking resource as the lookup key.
--- 3. The ;ResourceRelationship; message and corresponding ;Signature; are verified to be authored by the `signer` ;ExternalIdentity;.
--- @param signer The external identity that has authorized the consumption and creation of resources.
--- @param origin The ;Tag; referencing the resource that must perform the check.
--- @param publicInputs The public inputs of the resource logic function.
isAuthorizedBy
  (signer : ExternalIdentity)
  (origin : Tag)
  (publicInputs : Logic.Instance)
  : Bool :=
  case
    lookupAppData@{
      key := origin;
      Value := Pair ResourceRelationship Signature;
      appData := Logic.Instance.appData publicInputs;
    }
  of
    | nothing := false
    | just (message, signature) :=
      verify@{
        signature;
        message;
        signer;
      }
        && checkResourceRelationship@{
             message;
             origin;
             nullifiers := Logic.Instance.nullifiers publicInputs;
             commitments := Logic.Instance.commitments publicInputs;
           };
