module Applib.Transaction.Split;

import Stdlib.Prelude open;
import Stdlib.Data.Set as Set open using {Set};

import Anoma open;

import Applib.Transaction.Errors open;
import Applib.Resource.Traits open;
import Applib.Transaction.Traits open;
import Applib.Helpers open;

--- Splits a ;Convertable; typed ;Resource;.
--- The function returns a ;StandardError; if the ;Convertable; ;Resource;
--- - is ;NonTransferable;
--- - is not owned by the calling ;Identity;
--- - or quantities do not balance.
split
  {R}
  {{Ord R}}
  {{Convertable R}}
  {{HasOwner R}}
  {{HasQuantity R}}
  {{HasNonce R}}
  {{HasTransferability R}}
  {{ActionConvertable R R}}
  (standardInputs : StandardInputs)
  (toSplit : R)
  -- TODO refactor, sets as inputs
  (quantitiesAndReceivers : List (Pair Quantity ExternalIdentity))
  : Result StandardError Transaction :=
  let
    self := Identity.external (StandardInputs.caller standardInputs);
    owner := HasOwner.get toSplit;

    totalQuantity :=
      for (sum := 0) (quantity in map fst quantitiesAndReceivers) {
        sum + quantity
      };

    quantitiesReceiversNonces :=
      for (lastPrng, acc := prngInit (StandardInputs.randSeed standardInputs)
          , Set.empty) (pair in quantitiesAndReceivers) {
          case generateNextNonce lastPrng of
            nonce, nextPrng :=
              nextPrng
                , Set.insert@{
                    elem := pair, nonce;
                    set := acc;
                  }
        }
        |> snd;

    created :=
      Set.map ((quantity, receiver), nonce in quantitiesReceiversNonces) {
        toSplit
          |> HasQuantity.set quantity
          |> HasOwner.set receiver
          |> HasNonce.set nonce
      };

  in case HasTransferability.get toSplit of
       | NonTransferable := throw mkNonTransferableError
       | Transferable :=
         case owner == self of
           | false :=
             throw
               mkUnauthorizedError@{
                 expected := self;
                 actual := owner;
               }
           | true :=
             let
               balance := HasQuantity.get toSplit;
             in case balance == totalQuantity of
                  | false :=
                    throw
                      mkInsufficientHasQuantityError@{
                        limit := balance;
                        actual := totalQuantity;
                      }
                  | true :=
                    ok
                      mkTransactionHelper@{
                        roots :=
                          Set.singleton
                            (StandardInputs.currentRoot standardInputs);
                        actions :=
                          Set.singleton
                            (ActionConvertable.toAction
                              standardInputs
                              (Set.singleton toSplit)
                              (created));
                      };
