module Applib.Transaction.Finalize;

import Stdlib.Prelude open;
import Stdlib.Data.Set as Set open using {Set};
import Anoma open;

import Applib.Helpers open;
import Applib.Identities open;
import Applib.Transaction.Errors open;
import Applib.Resource.Traits open;
import Applib.Transaction.Traits open;

--- Finalizes a ;Convertable; typed ;Resource;, if the calling ;Identity; is the owner.
--- This requires an ephemeral resource to be created.
--- The function returns a ;StandardError; if
--- - the calling ;Identity; is not the owner
--- - the supply type is ;Fixed; in which case finalization is not supported.
--- - the supply type is ;Capped; which is not supported.
finalize
  {R}
  {{Ord R}}
  {{Convertable R}}
  {{HasOwner R}}
  {{HasSupply R}}
  {{HasEphemerality R}}
  {{ActionConvertable R R}}
  (standardInputs : StandardInputs)
  (toFinalize : R)
  : Result StandardError Transaction :=
  let
    caller : ExternalIdentity :=
      standardInputs |> StandardInputs.caller |> Identity.external;
    owner : ExternalIdentity := HasOwner.get toFinalize;
    ephResource :=
      HasEphemerality.set
        Ephemeral
        (HasOwner.set Zero.externalIdentity toFinalize);
  in if
    | owner /= caller :=
      throw
        mkUnauthorizedError@{
          expected := caller;
          actual := owner;
        }
    | else :=
      case HasSupply.get toFinalize of
        | Unbound :=
          ok
            mkTransactionHelper@{
              roots :=
                Set.singleton (StandardInputs.currentRoot standardInputs);
              actions :=
                Set.singleton
                  (ActionConvertable.toAction
                    standardInputs
                    (Set.singleton toFinalize)
                    (Set.singleton ephResource));
            }
        | Capped :=
          throw
            mkDefaultError@{
              msg := "Tokens with capped supply are not supported yet.";
            }
        | Fixed _ :=
          throw
            mkDefaultError@{
              msg := "Tokens with fixed supply cannot be finalized.";
            };
