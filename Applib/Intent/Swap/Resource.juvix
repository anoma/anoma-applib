module Applib.Intent.Swap.Resource;

import Stdlib.Prelude open;
import Stdlib.Trait.Ord.Eq open using {fromOrdToEq};
import Stdlib.Data.Set as Set open using {Set};
import Anoma open;
import Anoma.Builtin.System open;
import Applib.Helpers open;
import Applib.Identities open;
import Applib.Resource.Traits open;
import Applib.Intent.Asset open;
import Applib.Intent.Swap.Logic open;
import Applib.Resource.Standards.Ownership open;

module SwapIntent;
  type SwapIntent := mk@{resource : Resource};

  create
    (nonce : Nonce)
    (want : QuantifiedAssets)
    (receiver solver : ExternalIdentity)
    : SwapIntent :=
    mk
      mkResource@{
        logicRef := BindingReference.compute (swapIntentLogic want receiver);
        labelRef := BindingReference.compute (mkLabel 0);
        valueRef :=
          BindingReference.compute
            (solver
              |> ownershipValueMapEntry
              |> Set.singleton
              |> anomaEncode
              |> mkValue);
        quantity := 1;
        ephemeral := true;
        nullifierKeyCommitment := Universal.nullifierKeyCommitment;
        nonce;
        randSeed := UnusedRandSeed;
      };

  module SwapIntentInternal;
    --- Compares two ;SwapIntent; objects.
    compare (lhs rhs : SwapIntent) : Ordering :=
      Ord.cmp (SwapIntent.resource lhs) (SwapIntent.resource rhs);

    --- Implements the ;Ord; trait for ;SwapIntent;.
    instance
    SwapIntent-Ord : Ord SwapIntent := mkOrd compare;

    --- Implements the ;Eq; trait for ;SwapIntent;.
    instance
    SwapIntent-Eq : Eq SwapIntent := fromOrdToEq;
  end;

  open SwapIntent public;
end;

open SwapIntent using {SwapIntent} public;

instance
SwapIntent-Convertable : Convertable SwapIntent :=
  mkConvertable@{
    toResource (t : SwapIntent) : Resource := SwapIntent.resource t;
    fromResource (r : Resource) : SwapIntent := SwapIntent.mk r;
  };

instance
SwapIntent-HasQuantity : HasQuantity SwapIntent :=
  TraitFromConvertable.hasQuantity {SwapIntent};

instance
SwapIntent-HasOwner : HasOwner SwapIntent :=
  TraitFromConvertable.hasOwner {SwapIntent};

instance
SwapIntent-HasEphemerality : HasEphemerality SwapIntent :=
  TraitFromConvertable.hasEphemerality {SwapIntent};

instance
SwapIntent-HasKind : HasKind SwapIntent :=
  TraitFromConvertable.hasKind {SwapIntent};
