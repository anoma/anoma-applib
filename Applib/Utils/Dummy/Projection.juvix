module Applib.Utils.Dummy.Projection;

import Stdlib.Prelude open;
import Stdlib.Debug.Fail open;
import Stdlib.Debug.Trace open;
import Stdlib.Data.Set as Set open using {Set};

import Anoma open;
import Anoma.Builtin.System open;

import Applib.Utils.Dummy.Resource open;
import Applib.Transaction.Errors open;
import Applib.Helpers open;

--- Returns the value contents of a ;Set;  of dummy ;Resource;s.
--- @param dummyResources The dummy ;Resource; ;Set;.
--- @return A list of strings decoded from the resource ;Value; fields.
readValueField (dummyResources : Set Resource) : List String :=
  let
    expectedKind :=
      KindInternal.kind@{
        logicRef := BindingReference.compute alwaysValidLogic;
        labelRef := BindingReference.compute emptyLabel;
      };
  in "DEBUG: Evaluating `Applib.Utils.Dummy.Projection.readValueField`"
    >-> map (resource in Set.toList dummyResources) {
      let
        currentKind := kind resource;
      in fromResult
        case currentKind == expectedKind of {
          | true :=
            resource
              |> Resource.valueRef
              |> lookupFromReferenceChecked
              |> Value.unValue
              |> anomaDecode
              |> ok
          | false :=
            throw
              mkInvalidKindError@{
                expected := expectedKind;
                actual := currentKind;
              }
        }
    };
