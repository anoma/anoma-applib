module Applib.Utils.Counter.Simple.Resource;

import Stdlib.Prelude open;
import Stdlib.Data.Set as Set open;

import Anoma open;
import Anoma.Builtin.System open;

import Applib.Identities open;
import Applib.Random open;
import Applib.Helpers open;
import Applib.Utils.Counter.Simple.Label open;
import Applib.Utils.Counter.Simple.Logic open;

{-- A counter with a quantity of 1 ensuring that can be consumed by the universal identity (and anyone who has composed their identity with it). --}
mkCounter {count : Nat := 0} {ephemeral : Bool := false} : Resource :=
  mkResource@{
    logicRef := Reference.to (counterLogic);
    labelRef := Reference.to (counterLabel);
    valueRef := Reference.to (count |> mkValue);
    quantity := 1;
    ephemeral;
    nullifierKeyCommitment := Universal.nullifierKeyCommitment;
    nonce := mkNonce rand;
    randSeed := mkRandSeed rand;
  };

{-- The counter kind --}
counterKind : Kind :=
  KindInternal.kind@{
    logicRef := Reference.to (counterLogic);
    labelRef := Reference.to (counterLabel);
  };
