module Applib.Utils.Counter.Simple.Resource;

import Stdlib.Prelude open;
import Stdlib.Data.Set as Set open;

import Anoma open;
import Anoma.Builtin.System open;

import Applib.Identities open;
import Applib.Random open;
import Applib.Helpers open;
import Applib.Utils.Counter.Simple.Label open;
import Applib.Utils.Counter.Simple.Logic open;

--- Constructs a counter with a quantity of 1 that can be consumed by the universal identity (and everyone who has composed their identity with it).
--- @param count The intial count.
--- @param ephemeral Whether the resource is ephemeral or not.
--- @return The constructed counter resource.
mkCounter {count : Nat := 0} {ephemeral : Bool := false} : Resource :=
  mkResource@{
    logicRef := BindingReference.compute (counterLogic);
    labelRef := BindingReference.compute (counterLabel);
    valueRef := BindingReference.compute (count |> mkValue);
    quantity := 1;
    ephemeral;
    nullifierKeyCommitment := Universal.nullifierKeyCommitment;
    nonce := mkNonce rand;
    randSeed := mkRandSeed rand;
  };

--- Returns the counter kind.
--- @return The counter kind.
counterKind : Kind :=
  KindInternal.kind@{
    logicRef := BindingReference.compute (counterLogic);
    labelRef := BindingReference.compute (counterLabel);
  };
