module Applib.Utils.Counter.Simple.Interface.Transaction;

import Stdlib.Prelude open;
import Stdlib.Debug.Fail open using {failwith};
import Stdlib.Data.Set as Set open using {Set};

import Anoma open;

import Applib.Helpers open;
import Applib.Identities open;
import Applib.Utils.Counter.Simple.Resource open;
import Applib.Utils.Counter.Simple.Logic open;
import Applib.Utils.Counter.Simple.Count open;

initialize (standardInputs : StandardInputs) : Transaction :=
  prepareCounterTransaction@{
    standardInputs;
    consumed :=
      Set.singleton
        mkCounter@{
          ephemeral := true;
        };
    created :=
      Set.singleton
        mkCounter@{
          ephemeral := false;
        };
  };

increment
  (standardInputs : StandardInputs) (currentCounter : Resource) : Transaction :=
  if
    | kind currentCounter /= counterKind :=
      failwith "The input resource has wrong kind."
    | else :=
      prepareCounterTransaction@{
        standardInputs;
        consumed := Set.singleton currentCounter;
        created :=
          Set.singleton
            mkCounter@{
              count := getCount currentCounter + 1;
            };
      };

prepareCounterTransaction
  (standardInputs : StandardInputs)
  (consumed created : Set Resource)
  : Transaction :=
  let
    -- Put maps into the custom inputs that map:
    -- - nullifiers to consumed resources
    -- - commitments to created resources
    nfResMapping := nullifierToResourceMapping consumed;
    cmResMapping := commitmentToResourceMapping created;
    customInputs :=
      Set.union
        (NullifiersAndCustomInputs.customInputs nfResMapping)
        (CommitmentsAndCustomInputs.customInputs cmResMapping);

    -- Extract nullifiers and commitments to avoid recomputing them
    nullifiers := NullifiersAndCustomInputs.nullifiers nfResMapping;
    commitments := CommitmentsAndCustomInputs.commitments cmResMapping;

  in mkTransactionHelper@{
       roots := Set.singleton (StandardInputs.currentRoot standardInputs);
       actions :=
         Set.singleton
           mkActionHelper@{
             consumed;
             created;
             appData := Set.empty;
             customInputs;
             maybeNullifiers := just nullifiers;
             maybeCommitments := just commitments;
           };
     };
