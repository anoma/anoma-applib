module Applib.Utils.Counter.Simple.Interface.Projection;

import Stdlib.Prelude open;
import Stdlib.Debug.Fail open using {failwith};
import Anoma open;
import Applib.Utils.Counter.Simple.Resource open;
import Applib.Utils.Counter.Simple.Count open;

--- Returns the count of a counter ;Resource;.
--- If the ;Kind; is not correct, the function fails.
--- @param counter The counter resource.
--- @return The count.
count (counter : Resource) : Nat :=
  if
    | kind counter /= counterKind :=
      failwith "The input resource has the wrong kind."
    | else := getCount counter;
