module Applib.Utils.Counter.Simple.Logic;

import Stdlib.Prelude open;
import Stdlib.Data.Set as Set open using {Set};

import Anoma open;
import Applib.Helpers open;
import Applib.Identities open;
import Applib.Resource.Traits open;
import Applib.Utils.Counter.Simple.Count open;
import Applib.Utils.Counter.Simple.Label open;

--- The counter logic.
counterLogic
  : (publicInputs : Logic.Instance)
    -> (privateInputs : Logic.Witness)
    -> Bool :=
  parametrizedCounterLogic@?{
    initializationLogic;
    incrementationLogic;
  };

parametrizedCounterLogic
  (initializationLogic : Resource -> Logic.Instance -> Bool)
  (incrementationLogic : Resource -> Logic.Witness -> Bool)
  (publicInputs : Logic.Instance)
  (privateInputs : Logic.Witness)
  : Bool :=
  let
    tag := Logic.Instance.tag publicInputs;
    customInputs := Logic.Witness.customInputs privateInputs;
  in case tag of
       | Consumed nullifier :=
         case lookupResource nullifier customInputs of {
           | nothing := false
           | just self :=
             case HasEphemerality.get self of {
               | Ephemeral := initializationLogic self publicInputs
               | NonEphemeral := incrementationLogic self privateInputs
             }
         }
       | Created commitment :=
         case lookupResource commitment customInputs of
           | nothing := false
           | just self :=
             case HasEphemerality.get self of
               | Ephemeral := false
               | NonEphemeral := true;

initializationLogic (self : Resource) (publicInputs : Logic.Instance) : Bool :=
  quantityCheck@{
    self;
  };

quantityCheck (self : Resource) : Bool := HasQuantity.get self == 1;

incrementationLogic (self : Resource) (privateInputs : Logic.Witness) : Bool :=
  let
    consumed := privateInputs |> Logic.Witness.consumed |> Set.toList;
    created := privateInputs |> Logic.Witness.created |> Set.toList;
  in case consumed, created of
       | [consumedCounter], [createdCounter] :=
         kindCheck@{
           self;
           consumedCounter;
           createdCounter;
         }
           && isIncremented@{
                consumedCounter;
                createdCounter;
              }
       | _, _ := false;

kindCheck (self consumedCounter createdCounter : Resource) : Bool :=
  self == consumedCounter && kind consumedCounter == kind createdCounter;

isIncremented (consumedCounter createdCounter : Resource) : Bool :=
  let
    expected : Nat := getCount consumedCounter + 1;
    actual : Nat := getCount createdCounter;
  in expected == actual;
