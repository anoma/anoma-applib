module Applib.Utils.Counter.Unique.Resource;

import Stdlib.Prelude open;
import Stdlib.Data.Set as Set open;

import Anoma open;
import Anoma.Builtin.System open;

import Applib.Helpers open;
import Applib.Utils.Counter.Unique.Logic open;
import Applib.Utils.Counter.Unique.Label open;
import Applib.Utils.Counter.Unique.Interface.Projection open;
import Applib.Identities open;
import Applib.Resource.Standards.ValueMap open;
import Applib.Resource.Standards.Ownership open;
import Applib.Random open;

mkCounter
  (identity : Identity)
  (uniqueLabel : CounterLabel)
  {count : Nat := 0}
  {ephemeral : Bool := false}
  : Resource :=
  mkResource@{
    logicRef := Reference.to (counterLogic);
    labelRef := Reference.to (uniqueLabel |> anomaEncode |> mkLabel);
    valueRef := Reference.to (count |> mkValue);
    quantity := 1;
    ephemeral;
    nullifierKeyCommitment := toNullifierKeyCommitment identity;
    nonce := mkNonce rand;
    randSeed := mkRandSeed rand;
  };

counterKind (labelRef : LabelRef) : Kind :=
  KindInternal.kind@{
    logicRef := Reference.to (counterLogic);
    labelRef;
  };
