module Applib.Utils.Counter.Unique.Logic;

import Stdlib.Prelude open;
import Stdlib.Data.Set as Set open using {Set};

import Anoma open;
import Applib.Helpers open;
import Applib.Identities open;
import Applib.Resource.Traits open;
import Applib.Utils.Counter.Unique.Label open;
import Applib.Utils.Counter.Simple.Logic as Simple;

--- The counter resource logic.
--- @param publicInputs The resource logic public inputs.
--- @param privateInputs The resource logic private inputs.
--- @return The resource logic validity.
counterLogic
  : (publicInputs : Logic.Instance)
    -> (privateInputs : Logic.Witness)
    -> Bool :=
  \{publicInputs privateInputs :=
    Simple.parametrizedCounterLogic@{
      initializationLogic;
      incrementationLogic := Simple.incrementationLogic;
      publicInputs;
      privateInputs;
    }};

--- The initialization sub-logic function checking that the quantity equals 1 and
--- that the nullifier specified in the counter ;Label; is present.
--- @param self The resource object carrying the checking resource logic.
--- @param publicInputs The resource logic public inputs.
--- @return Whether the logic is valid or not.
initializationLogic (self : Resource) (publicInputs : Logic.Instance) : Bool :=
  Simple.initializationLogic@{
    self;
    publicInputs;
  }
    && isNullifierPresent@{
         nullifier := getNullifierfFromLabel self;
         nullifierSet := Logic.Instance.nullifiers publicInputs;
       };
