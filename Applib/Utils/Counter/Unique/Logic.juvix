module Applib.Utils.Counter.Unique.Logic;

import Stdlib.Prelude open;
import Stdlib.Data.Set as Set open using {Set};

import Anoma open;
import Applib.Helpers open;
import Applib.Identities open;
import Applib.Resource.Traits open;
import Applib.Utils.Counter.Unique.Interface.Projection open;
import Applib.Utils.Counter.Unique.Label open;
import Applib.Utils.Counter.Simple.Logic as Simple;

counterLogic
  : (publicInputs : Logic.Instance)
    -> (privateInputs : Logic.Witness)
    -> Bool :=
  -- TODO how to use the named syntax here?
    Simple.parametrizedCounterLogic
    initializationLogic
    Simple.incrementationLogic;

initializationLogic (self : Resource) (publicInputs : Logic.Instance) : Bool :=
  Simple.quantityCheck@{
    self;
  }
    && isNullifierPresent@{
         nullifier := getNullifierfFromLabel self;
         nullifierSet := Logic.Instance.nullifiers publicInputs;
       };
