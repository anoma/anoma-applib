module Applib.Utils.Counter.Unique.Logic;

import Stdlib.Prelude open;
import Stdlib.Data.Set as Set open using {Set};

import Anoma open;
import Applib.Helpers open;
import Applib.Utils.Counter.Unique.Count open;
import Applib.Utils.Counter.Unique.Label open;
import Applib.Resource.Traits open;
import Applib.Identities open;

counterLogic
  (publicInputs : Logic.Instance) (privateInputs : Logic.Witness) : Bool :=
  let
    tag := Logic.Instance.tag publicInputs;
    customInputs := Logic.Witness.customInputs privateInputs;
  in case tag of
       | Consumed nullifier :=
         case lookupResource nullifier customInputs of {
           | nothing := false
           | just self :=
             case HasEphemerality.get self of {
               | Ephemeral := initializationLogic self publicInputs
               | NonEphemeral :=
                 incrementationLogic self publicInputs privateInputs
             }
         }
       | Created commitment :=
         case lookupResource commitment customInputs of
           | nothing := false
           | just self :=
             case HasEphemerality.get self of
               | Ephemeral := false
               | NonEphemeral := true;

initializationLogic (self : Resource) (publicInputs : Logic.Instance) : Bool :=
  HasQuantity.get self == 1
    && isNullifierPresent@{
         nullifier := getNullifierfFromLabel self;
         nullifierSet := Logic.Instance.nullifiers publicInputs;
       };

incrementationLogic
  (self : Resource)
  (publicInputs : Logic.Instance)
  (privateInputs : Logic.Witness)
  : Bool :=
  let
    consumed := privateInputs |> Logic.Witness.consumed |> Set.toList;
    created := privateInputs |> Logic.Witness.created |> Set.toList;
  in case consumed, created of
       | [currentCounter], [incrementedCounter] :=
         self == currentCounter
           && kind currentCounter == kind incrementedCounter
           && isIncremented@{
                old := currentCounter;
                new := incrementedCounter;
              }
       | _, _ := false;

isIncremented (old new : Resource) : Bool :=
  let
    expected : Nat := getCount old + 1;
    actual : Nat := getCount new;
  in expected == actual;
