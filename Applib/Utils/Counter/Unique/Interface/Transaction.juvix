module Applib.Utils.Counter.Unique.Interface.Transaction;

import Stdlib.Prelude open;
import Stdlib.Debug.Fail open;
import Stdlib.Data.Set as Set open using {Set};
import Anoma open;
import Anoma.Builtin.System open;
import Applib.Helpers open;
import Applib.Identities open;
import Applib.Transaction.Errors open;
import Applib.Authorization open;
import Applib.Utils.Dummy.Resource open;
import Applib.Utils.Counter.Unique.Label open;
import Applib.Utils.Counter.Unique.Logic open;
import Applib.Utils.Counter.Unique.Resource open;
import Applib.Utils.Counter.Simple.Count open;
import Applib.Helpers open;

import Applib.Utils.Counter.Simple.Interface.Transaction as Simple;

--- Requires a consumable resource, e.g., `Utils.Dummy.Resource`.
initialize
  (standardInputs : StandardInputs) (consumable : Resource) : Transaction :=
  let
    identity := StandardInputs.identity standardInputs;
    ephConsumable := consumable@Resource{ephemeral := true};
    uniqueLabel := createUniqueCounterLabel consumable;
    ephCounter :=
      mkCounter@{
        identity;
        ephemeral := true;
        uniqueLabel;
        count := 0;
      };
    newCounter :=
      mkCounter@{
        identity;
        ephemeral := false;
        uniqueLabel;
        count := 0;
      };

  in Simple.prepareCounterTransaction@{
       standardInputs;
       consumed := Set.fromList [consumable; ephCounter];
       created := Set.fromList [ephConsumable; newCounter];
     };

increment
  (standardInputs : StandardInputs) (currentCounter : Resource) : Transaction :=
  if
    | kind currentCounter /= counterKind (Resource.labelRef currentCounter) :=
      failwith "The input resource has wrong kind."
    | else :=

      Simple.prepareCounterTransaction@{
        standardInputs;
        consumed := Set.singleton currentCounter;
        created :=
          Set.singleton
            mkCounter@{
              identity := StandardInputs.identity standardInputs;
              uniqueLabel := getCounterLabel currentCounter;
              count := getCount currentCounter + 1;
            };
      };
