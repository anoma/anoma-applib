module Applib.Utils.Counter.Unique.Interface.Transaction;

import Stdlib.Prelude open;
import Stdlib.Debug.Fail open;
import Stdlib.Data.Set as Set open using {Set};
import Anoma open;
import Applib.Helpers open;
import Applib.Utils.Counter.Unique.Label open;
import Applib.Utils.Counter.Unique.Logic open;
import Applib.Utils.Counter.Unique.Resource open;
import Applib.Utils.Counter.Simple.Count as Simple.Count;
import Applib.Utils.Counter.Simple.Interface.Transaction as Simple.Transaction;

--- Initializes a unique counter that can be incremented by everyone.
--- This requires a consumable resource, e.g., `Utils.Dummy.Resource`.
--- @param standardInputs The transaction function standard inputs.
--- @param consumable A consumable resource.
--- @return The transaction object initializing a counter.
initialize
  (standardInputs : StandardInputs) (consumable : Resource) : Transaction :=
  let
    nonces :=
      generateNonces@{
        n := 2;
        randSeed := StandardInputs.randSeed standardInputs;
      };
    ephConsumable := consumable@Resource{ephemeral := true};
    uniqueLabel := createUniqueCounterLabel consumable;
    ephCounter :=
      mkCounter@{
        nonce := get 0 nonces;
        ephemeral := true;
        uniqueLabel;
        count := 0;
      };
    newCounter :=
      mkCounter@{
        nonce := get 1 nonces;
        ephemeral := false;
        uniqueLabel;
        count := 0;
      };
  in Simple.Transaction.prepareCounterTransaction@{
       standardInputs;
       consumed := Set.fromList [consumable; ephCounter];
       created := Set.fromList [ephConsumable; newCounter];
     };

--- Increments the counter value by 1.
--- @param currentCounter The current counter to increment.
--- @param standardInputs The transaction function standard inputs.
--- @return The transaction object incrementing a counter.
increment
  (standardInputs : StandardInputs) (currentCounter : Resource) : Transaction :=
  if
    | kind currentCounter /= counterKind (Resource.labelRef currentCounter) :=
      failwith "The input resource has wrong kind."
    | else :=
      Simple.Transaction.prepareCounterTransaction@{
        standardInputs;
        consumed := Set.singleton currentCounter;
        created :=
          Set.singleton
            mkCounter@{
              nonce := generateNonce (StandardInputs.randSeed standardInputs);
              uniqueLabel := getCounterLabel currentCounter;
              count := Simple.Count.getCount currentCounter + 1;
            };
      };
