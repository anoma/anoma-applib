module Applib.Utils.Counter.Unique.Interface.Projection;

import Stdlib.Prelude open;
import Stdlib.Debug.Fail open using {failwith};
import Anoma open;

import Applib.Helpers open;
import Applib.Utils.Counter.Unique.Resource open;
import Applib.Utils.Counter.Simple.Count open;

-- TODO refactor name
count (resource : Resource) : Nat :=
  if
    -- TODO refactor this check. (Only the logicRef is checked here and this should be more explicit)
    | kind resource
      /= counterKind@{
           labelRef := Resource.labelRef resource;
         } := failwith "The input resource has wrong kind."
    | else := getCount resource;

--- A unique identifier (UID) characterized by a ;Nat; counter value
--- and an unique counter ;Kind;.
type UID :=
  mkUID@{
    id : Nat;
    uniqueKind : Kind;
  };

--- Returns the current UID of a counter ;Resource;.
getUID (counter : Resource) : UID :=
  mkUID@{
    id : Nat := getCount counter;
    uniqueKind := kind counter;
  };
