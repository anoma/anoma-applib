module Applib.Token.Resource;

import Stdlib.Prelude open;
import Stdlib.Data.Set as Set open using {Set};

import Anoma open;
import Anoma.Builtin.System open;

import Applib.Resource.Traits open;
import Applib.Token.Label open;
import Applib.Token.Logic open;
import Applib.Identities open;
import Applib.Resource.Standards.Ownership open;

module Token;
  type Token :=
    mk@{
      resource : Resource;
    };

  create
    (nonce : Nonce)
    (quantity : Quantity)
    (tokenLabel : TokenLabel)
    (owner : ExternalIdentity)
    {ephemeral : Bool := false}
    : Token :=
    mk
      mkResource@{
        logicRef :=
          BindingReference.compute
            (tokenLogic
              (TokenLabel.supply tokenLabel)
              (TokenLabel.originator tokenLabel));
        labelRef := toLabelRef tokenLabel;
        valueRef :=
          BindingReference.compute
            (owner
              |> ownershipValueMapEntry
              |> Set.singleton
              |> anomaEncode
              |> mkValue);
        quantity;
        ephemeral;
        nullifierKeyCommitment := Universal.nullifierKeyCommitment;
        nonce;
        randSeed := UnusedRandSeed;
      };

  deriving instance
  Token-Ord : Ord Token;

  deriving instance
  Token-Eq : Eq Token;

  open Token public;
end;

open Token using {Token} public;

instance
Token-Convertable : Convertable Token :=
  mkConvertable@{
    toResource (token : Token) : Resource := Token.resource token;
    fromResource (resource : Resource) : Token :=
      Token.mk@{
        resource;
      };
  };

instance
Token-HasQuantity : HasQuantity Token :=
  TraitFromConvertable.hasQuantity {Token};

instance
Token-HasOwner : HasOwner Token :=
  mkHasOwner@{
    get (token : Token) : ExternalIdentity :=
      token
        |> Convertable.toResource
        |> Resource.valueRef
        |> lookupFromReferenceChecked
        |> Value.unValue
        |> anomaDecode;
    set (owner : ExternalIdentity) (token : Token) : Token :=
      (token |> Convertable.toResource)@Resource{valueRef := owner
          |> anomaEncode
          |> mkValue
          |> BindingReference.compute}
        |> Convertable.fromResource;
  };

instance
Token-HasEphemerality : HasEphemerality Token :=
  TraitFromConvertable.hasEphemerality {Token};

instance
Token-HasLogic : HasLogic Token := TraitFromConvertable.hasLogic {Token};

instance
Token-HasNonce : HasNonce Token := TraitFromConvertable.hasNonce {Token};

instance
Token-HasKind : HasKind Token := TraitFromConvertable.hasKind {Token};

instance
Token-Label-HasLabel : HasLabel Token TokenLabel :=
  mkHasLabel@{
    get (token : Token) : TokenLabel :=
      token |> Convertable.toResource |> Resource.labelRef |> fromLabelRef;
    set (tokenLabel : TokenLabel) (token : Token) : Token :=
      (token |> Convertable.toResource)@Resource{labelRef := toLabelRef
          tokenLabel}
        |> Convertable.fromResource;
  };

instance
Token-HasSupply : HasSupply Token :=
  mkHasSupply@{
    get (token : Token) : Supply := token |> HasLabel.get |> TokenLabel.supply;
    set (supply : Supply) (token : Token) : Token :=
      let
        newLabel := (HasLabel.get token)@TokenLabel{supply := supply};
      in HasLabel.set newLabel token;
  };

instance
Token-HasTransferability : HasTransferability Token :=
  mkHasTransferability@{
    get (token : Token) : Transferability :=
      token |> HasLabel.get |> TokenLabel.transferability;
    set (transferability : Transferability) (token : Token) : Token :=
      let
        newLabel :=
          (HasLabel.get token)@TokenLabel{transferability := transferability};
      in HasLabel.set newLabel token;
  };

instance
Token-HasOriginator : HasOriginator Token :=
  mkHasOriginator@{
    get (token : Token) : ExternalIdentity :=
      token |> HasLabel.get |> TokenLabel.originator;
    set (originator : ExternalIdentity) (token : Token) : Token :=
      let
        newLabel := (HasLabel.get token)@TokenLabel{originator := originator};
      in HasLabel.set newLabel token;
  };
