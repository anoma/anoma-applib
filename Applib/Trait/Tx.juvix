module Applib.Trait.Tx;

import Stdlib.Prelude open;
import Anoma open;
import Applib.Data.TxContext open;
import BaseLayer.ResourceMachine open;
import Applib.Trait.Random open;
import Mtl open;

--- An environment used to create Anoma transactions
trait
type Tx (M : Type -> Type) :=
  mkTx@{
    --- Generates a random ;Nonce;
    genRandomNonce : M Nonce;
    getTxContext : M TxContext;
  };

open Tx using {mkTx} public;

open Tx public;

module Private;
  --- Concrete implementation of the ;Tx; trait
  TxBuilder (A : Type) : Type := StateT PRNG (ReaderT TxContext Mtl.Identity) A;

  instance
  TxBuilder-Tx : Tx (StateT PRNG (ReaderT TxContext Mtl.Identity)) :=
    mkTx@{
      getTxContext : TxBuilder TxContext := ask;
      genRandomNonce : TxBuilder Nonce :=
        do {
          bytes <- Random.genRandomBytes 32;
          pure (Nonce.from32SizedByteArray bytes);
        };
    };

  runTxBuilder' {A} (seed : Nat) (si : TxContext) : TxBuilder A -> A :=
    evalState (mkPrng seed) >> runReader si >> Mtl.run;
end;

open Private using {TxBuilder} public;

--- Run the transaction builder
runTx (seed : Nat) (si : TxContext) : TxBuilder Transaction -> Transaction :=
  evalState (mkPrng seed) >> runReader si >> Mtl.run;
