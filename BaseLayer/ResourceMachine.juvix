module BaseLayer.ResourceMachine;

import Stdlib.Prelude open;
import Stdlib.Data.Map as Map open;

module AnomaSet;
  empty {A} : AnomaSet A := fromList [];

  builtin anoma-set
  axiom AnomaSet : Type -> Type;

  builtin anoma-set-to-list
  axiom toList {A} (set : AnomaSet A) : List A;

  builtin anoma-set-from-list
  axiom fromList {A} (list : List A) : AnomaSet A;
end;

open AnomaSet using {AnomaSet} public;

Logic : Type := Instance -> Witness -> Bool;

-- axiom AnomaNoun : Type;
-- axiom toAnomaNoun {A} : A -> AnomaNoun;
-- axiom fromAnomaNoun {A} : AnomaNoun -> A;

module AnomaAtom;
  module Private;
    positive
    type AnomaAtom := mkAnomaAtom Nat;
  end;

  open Private using {AnomaAtom} public;

  fromNat : Nat -> AnomaAtom := Private.mkAnomaAtom;

  toNat : AnomaAtom -> Nat
    | (Private.mkAnomaAtom n) := n;

  deriving instance
  AnomaAtomEqI : Eq AnomaAtom;

  deriving instance
  AnomaAtomOrdI : Ord AnomaAtom;
end;

open AnomaAtom using {AnomaAtom} public;

builtin anoma-resource
type Resource :=
  mkResource@{
    label : Nat;
    logic : Logic;
    ephemeral : Bool;
    quantity : Nat;
    value : Nat;
    --- 256 bits
    nullifierKeyCommitment : Nat;
    --- nonce for commitments 256 bits
    nonce : Nat;
    randSeed : Nat;
  };

module AppData;
  -- TODO we should replace AnomaAtom with AnomaNoun
  AppData : Type := AnomaSet (Pair Nat (Pair AnomaAtom Bool));

  toMap : AppData -> Map Nat AnomaAtom :=
    AnomaSet.toList >> map \{(k, v, _) := k, v} >> Map.fromList;

  fromMap : Map Nat AnomaAtom -> AppData :=
    Map.toList >> map \{(k, v) := k, v, true} >> AnomaSet.fromList;
end;

open AppData using {AppData} public;

positive
type Instance :=
  mkInstance@{
    commitments : List Nat;
    nullifiers : List Nat;
    tag : Nat;
    -- we are expecting this to be AppData[tag]
    otherPublic : AnomaAtom;
  };

positive
type Witness :=
  mkWitness@{
    -- Preserves the order from the transaction function. Does not have duplicates
    created : List Resource;
    -- Preserves the order from the transaction function. Does not have duplicates
    consumed : List Resource;
    otherPrivate : AnomaAtom;
  };

builtin anoma-delta
axiom Delta : Type;

builtin anoma-kind
axiom Kind : Type;

builtin anoma-resource-commitment
axiom commitment : Resource -> Nat;

-- FIXME The computation of the nullifier should depend on the nullifier key
builtin anoma-resource-nullifier
axiom nullifier : Resource -> Nat;

builtin anoma-resource-kind
axiom kind : Resource -> Kind;

instance
ShowKindI : Show Kind :=
  mkShow@{
    show (_ : Kind) : String := "<kind>";
  };

builtin anoma-resource-delta
axiom resourceDelta : Resource -> Delta;

type LogicProof : Type :=
  mkLogicProof@{
    resource : Resource;
    inputs : Pair Instance Witness;
  };

ComplianceProof : Type := Nat;

type Proof :=
  | proofCompliance
  | proofLogic Resource (Pair Instance Witness);

mkProofCompliance (_ : ComplianceProof) : Proof := proofCompliance;

mkProofLogic
  (resource : Resource)
  (publicInputs : Instance)
  (privateInputs : Witness)
  : Proof := proofLogic resource (publicInputs, privateInputs);

builtin anoma-action
type Action :=
  mkAction@{
    commitments : List Nat;
    nullifiers : List Nat;
    proofs : List Proof;
    appData : AppData;
  };

builtin anoma-action-delta
axiom actionDelta : Action -> Delta;

builtin anoma-actions-delta
axiom actionsDelta : List Action -> Delta;

builtin anoma-prove-action
axiom proveAction : Action -> Nat;

builtin anoma-prove-delta
axiom proveDelta : Delta -> Nat;

builtin anoma-zero-delta
axiom zeroDelta : Delta;

builtin anoma-add-delta
axiom addDelta : Delta -> Delta -> Delta;

builtin anoma-sub-delta
axiom subDelta : Delta -> Delta -> Delta;

CommitmentRoot : Type := Nat;

module Transaction;
  type Transaction :=
    mkTransaction@{
      --- root set for spent resources
      roots : List CommitmentRoot;
      actions : List Action;
      delta : Delta;
      deltaProof : Nat;
    };

  open Transaction public;

  compose (tx1 tx2 : Transaction) : Transaction :=
    mkTransaction@{
      roots := roots tx1 ++ roots tx2;
      actions := actions tx1 ++ actions tx2;
      delta := addDelta (delta tx1) (delta tx2);
      deltaProof := 0;
    };

end;

open Transaction using {Transaction; mkTransaction; compose} public;
