module Anoma.Encode;

import Stdlib.Prelude open;
import Anoma.Builtin.System open;

type Encoded A := internalMk Nat
with
  coerceFromNat {A} : Nat -> Encoded A := internalMk;

  decode {A} : (encoded : Encoded A) -> A
    | (internalMk n) := builtinAnomaDecode n;

  encode {A} (obj : A) : Encoded A := internalMk (builtinAnomaEncode obj);

  deriving instance
  Encoded-Ord {A} : Ord (Encoded A);

  deriving instance
  Encoded-Eq {A} : Eq (Encoded A);
end;

open Encoded using {decode; encode} public;
