module Anoma.Resource.Types;

import Stdlib.Prelude open;
import Anoma.Builtin.ByteArray open;
import Anoma.Primitives.FixedSize open;
import Anoma.Builtin.System open;

import BaseLayer.ResourceMachine as B;

open B using {Kind} public;

instance
KindEq : Eq Kind :=
  Eq.mk@{
    isEqual (a b : Kind) : Bool := builtinAnomaEncode a == builtinAnomaEncode b;
  };

--- A fixed-size data type encoding the public commitment to the private nullifier key.
type NullifierKeyCommitment :=
  mk@{
    unNullifierKeyCommitment : ByteArray;
  };

--- A fixed-size data type encoding a number to be used once ensuring that the resource commitment is unique.
  --- NOTE: This should be a number having an at most negligible chance of repeating is sufficient, e.g., a pseudo-random number.
  type Nonce := internalMk ByteArray with

  size : Nat := 32;

  fromNat : Nat -> Nonce := fromAnomaContents size >> internalMk;

  from32SizedByteArray : ByteArray -> Nonce := internalMk;

  toNat : Nonce -> Nat
    | (internalMk nonce) := toAnomaContents nonce;
end;

--- A fixed-size data type encoding a randomness seed.
--- NOTE: This seed provides pseudo randomness and cannot be expected to provide true randomness.
type RandSeed :=
  mk@{
    unRandSeed : ByteArray;
  };

--- The resource label type.
type Label :=
  mk@{
    unLabel : Nat;
  };

--- The resource value type.
type Value :=
  mk@{
    unValue : Nat;
  };

--- The resource commitment type.
type Commitment :=
  mk@{
    unCommitment : Nat;
  } with
  toNat : Commitment -> Nat := unCommitment;
  end;

--- The resource nullifier type.
type Nullifier :=
  mk@{
    unNullifier : Nat;
  }
 with
  toNat : Nullifier -> Nat := unNullifier;
  end;

--- The nullifier key type describing a secret required to compute the ;Nullifier; of a resource
type NullifierKey :=
  mk@{
    unNullifierKey : ByteArray;
  };

deriving instance
Label-Ord : Ord Label;

deriving instance
Label-Eq : Eq Label;

deriving instance
Value-Ord : Ord Value;

deriving instance
Value-Eq : Eq Value;

--- Implements the ;FixedSize; trait for ;NullifierKeyCommitment;.
instance
NullifierKeyCommitment-FixedSize : FixedSize NullifierKeyCommitment :=
  FixedSize.mk 32;

deriving instance
NullifierKeyCommitment-Ord : Ord NullifierKeyCommitment;

deriving instance
NullifierKeyCommitment-Eq : Eq NullifierKeyCommitment;

--- Implements the ;FixedSize; trait for ;Nonce;.
instance
Nonce-FixedSize : FixedSize Nonce := FixedSize.mk 32;

deriving instance
Nonce-Ord : Ord Nonce;

deriving instance
Nonce-Eq : Eq Nonce;

instance
RandSeed-FixedSize : FixedSize RandSeed := FixedSize.mk 32;

instance
RandSeetFromNaturalI : FromNatural RandSeed :=
  mkFromNatural@{
    fromNat (n : Nat) : RandSeed :=
      RandSeed.mk (fromAnomaContents (FixedSize.byteSize {RandSeed}) n);
  };

deriving instance
RandSeed-Ord : Ord RandSeed;

deriving instance
RandSeed-Eq : Eq RandSeed;

deriving instance
Commitment-Ord : Ord Commitment;

deriving instance
Commitment-Eq : Eq Commitment;

deriving instance
Nullifier-Ord : Ord Nullifier;

deriving instance
Nullifier-Eq : Eq Nullifier;

--- Implements the ;FixedSize; trait for ;NullifierKey;.
instance
NullifierKey-FixedSize : FixedSize NullifierKey := FixedSize.mk 64;

deriving instance
NullifierKey-Ord : Ord NullifierKey;

deriving instance
NullifierKey-Eq : Eq NullifierKey;
