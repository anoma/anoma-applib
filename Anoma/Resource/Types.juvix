module Anoma.Resource.Types;

import Stdlib.Prelude open;
import Anoma.Builtin.ByteArray open;
import Anoma.Primitives.FixedSize open;
import Anoma.Builtin.System open;

import BaseLayer.ResourceMachine as B;

open B using {Kind} public;

instance
KindEq : Eq Kind := mkEq@{
  eq (a b : Kind) : Bool := anomaEncode a == anomaEncode b;
};

--- A fixed-size data type encoding the quantity of a resource.
type Quantity :=
  mkQuantity@{
    unQuantity : Nat;
  };

instance
FromNaturalQuantityI : FromNatural Quantity := mkFromNatural mkQuantity;

instance
NaturalQuantityI : Natural Quantity := mkNatural@{
 + : Quantity -> Quantity -> Quantity
  | (mkQuantity a) (mkQuantity b) := mkQuantity (a Natural.+ b);

 * : Quantity -> Quantity -> Quantity
  | (mkQuantity a) (mkQuantity b) := mkQuantity (a Natural.* b)
};

--- A fixed-size data type encoding the public commitment to the private nullifier key.
type NullifierKeyCommitment :=
  mkNullifierKeyCommitment@{
    unNullifierKeyCommitment : ByteArray;
  };

open NullifierKeyCommitment public;

--- A fixed-size data type encoding a number to be used once ensuring that the resource commitment is unique.
--- NOTE: This should be a number having an at most negligible chance of repeating is sufficient, e.g., a pseudo-random number.
type Nonce :=
  mkNonce@{
    unNonce : Nat;
  };

nonceFromNat : Nat -> Nonce := mkNonce;

nonceFrom32SizedByteArray : ByteArray -> Nonce := toAnomaContents >> nonceFromNat;

nonceToNat : Nonce -> Nat := Nonce.unNonce;

--- A fixed-size data type encoding a randomness seed.
--- NOTE: This seed provides pseudo randomness and cannot be expected to provide true randomness.
type RandSeed :=
  mkRandSeed@{
    unRandSeed : ByteArray;
  };

--- The resource label type.
type Label :=
  mkLabel@{
    unLabel : Nat;
  };

--- The resource value type.
type Value :=
  mkValue@{
    unValue : Nat;
  };

--- The resource commitment type.
type Commitment :=
  mkCommitment@{
    unCommitment : Nat;
  };

open Commitment public;

--- The resource nullifier type.
type Nullifier :=
  mkNullifier@{
    unNullifier : Nat;
  };

open Nullifier public;

--- The nullifier key type describing a secret required to compute the ;Nullifier; of a resource
type NullifierKey :=
  mkNullifierKey@{
    unNullifierKey : ByteArray;
  };

deriving instance
Label-Ord : Ord Label;

deriving instance
Label-Eq : Eq Label;

deriving instance
Value-Ord : Ord Value;

deriving instance
Value-Eq : Eq Value;

deriving instance
Quantity-Ord : Ord Quantity;

deriving instance
Quantity-Eq : Eq Quantity;

--- Implements the ;FixedSize; trait for ;NullifierKeyCommitment;.
instance
NullifierKeyCommitment-FixedSize : FixedSize NullifierKeyCommitment :=
  mkFixedSize 32;

deriving instance
NullifierKeyCommitment-Ord : Ord NullifierKeyCommitment;

deriving instance
NullifierKeyCommitment-Eq : Eq NullifierKeyCommitment;

--- Implements the ;FixedSize; trait for ;Nonce;.
instance
Nonce-FixedSize : FixedSize Nonce := mkFixedSize 32;

deriving instance
Nonce-Ord : Ord Nonce;

deriving instance
Nonce-Eq : Eq Nonce;

instance
RandSeed-FixedSize : FixedSize RandSeed := mkFixedSize 32;

deriving instance
RandSeed-Ord : Ord RandSeed;

deriving instance
RandSeed-Eq : Eq RandSeed;

deriving instance
Commitment-Ord : Ord Commitment;

deriving instance
Commitment-Eq : Eq Commitment;

deriving instance
Nullifier-Ord : Ord Nullifier;

deriving instance
Nullifier-Eq : Eq Nullifier;

--- Implements the ;FixedSize; trait for ;NullifierKey;.
instance
NullifierKey-FixedSize : FixedSize NullifierKey := mkFixedSize 64;

deriving instance
NullifierKey-Ord : Ord NullifierKey;

deriving instance
NullifierKey-Eq : Eq NullifierKey;
