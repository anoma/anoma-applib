module Anoma.Builtin.ByteArray;

import Stdlib.Prelude open;
import BaseLayer.AnomaAtom open;
import Stdlib.Trait.Ord.Eq open using {fromOrdToEq};

module ByteArray;
  builtin bytearray
  axiom ByteArray : Type;

  builtin bytearray-from-list-byte
  axiom mk : List Byte -> ByteArray;

  zero (length : Nat) : ByteArray := mk (replicate length 0x0);

  --- The number of bytes in the ;ByteArray;
  builtin bytearray-length
  axiom size : ByteArray -> Nat;

  builtin anoma-bytearray-to-anoma-contents
  axiom rawToAnomaContents : ByteArray -> Nat;

  toAnomaContents : ByteArray -> AnomaAtom :=
    rawToAnomaContents >> AnomaAtom.fromNat;

  builtin anoma-bytearray-from-anoma-contents
  axiom rawFromAnomaContents (size : Nat) (contents : Nat) : ByteArray;

  fromAnomaContents (size : Nat) (contents : AnomaAtom) : ByteArray :=
    rawFromAnomaContents@{
      size;
      contents := AnomaAtom.toNat contents;
    };
end;

open ByteArray using {ByteArray; fromAnomaContents; toAnomaContents} public;

instance
ByteArray-Ord : Ord ByteArray :=
  let
    prod (b : ByteArray) : _ := ByteArray.size b, toAnomaContents b;
  in Ord.mk@{
       compare (lhs rhs : ByteArray) : Ordering :=
         Ord.compare (prod lhs) (prod rhs);
     };

instance
ByteArray-Eq : Eq ByteArray := fromOrdToEq;
