module Anoma.Identity.Internal;

import Stdlib.Prelude open;
import Stdlib.Trait.Ord.Eq open using {fromOrdToEq};
import Anoma.Builtin.ByteArray open using {ByteArray; toAnomaContents};

module InternalIdentity;
  --- A fixed-size data type describing an internal identity.
  type InternalIdentity :=
    mkInternalIdentity@{
      unInternalIdentity : ByteArray;
    };

  open InternalIdentity using {mkInternalIdentity} public;

  fromByteArray : ByteArray -> InternalIdentity := mkInternalIdentity;

  toByteArray : InternalIdentity -> ByteArray :=
    InternalIdentity.unInternalIdentity;

  toNat : InternalIdentity -> Nat := toByteArray >> toAnomaContents;

  --- Compares two ;InternalIdentity; objects.
  compare (lhs rhs : InternalIdentity) : Ordering :=
    Ord.compare
      (InternalIdentity.unInternalIdentity lhs)
      (InternalIdentity.unInternalIdentity rhs);

  --- Implements the ;Ord; trait for ;InternalIdentity;.
  instance
  InternalIdentity-Ord : Ord InternalIdentity := mkOrd compare;

  --- Implements the ;Eq; trait for ;InternalIdentity;.
  instance
  InternalIdentity-Eq : Eq InternalIdentity := fromOrdToEq;
end;

open InternalIdentity using {InternalIdentity} public;

--- The Anoma backend does not support converting natural numbers to strings
instance
InternalIdentity-Show : Show InternalIdentity :=
  mkShow \{id := "<<InternalIdentity>>"};
