module Anoma.Identity.Internal;

import Stdlib.Prelude open;
import BaseLayer.AnomaAtom open;
import Stdlib.Trait.Ord.Eq open using {fromOrdToEq};
import Anoma.Builtin.ByteArray open using {ByteArray; toAnomaContents};

--- A fixed-size data type describing an internal identity.
type InternalIdentity :=
  mk@{
    unInternalIdentity : ByteArray;
  }
with
  fromByteArray : ByteArray -> InternalIdentity := InternalIdentity.mk;

  toByteArray : InternalIdentity -> ByteArray :=
    InternalIdentity.unInternalIdentity;

  toAnomaAtom : InternalIdentity -> AnomaAtom := toByteArray >> toAnomaContents;

  toNat : InternalIdentity -> Nat := toAnomaAtom >> AnomaAtom.toNat;

  --- Compares two ;InternalIdentity; objects.
  compare (lhs rhs : InternalIdentity) : Ordering :=
    Ord.compare
      (InternalIdentity.unInternalIdentity lhs)
      (InternalIdentity.unInternalIdentity rhs);

  --- Implements the ;Ord; trait for ;InternalIdentity;.
  instance
  InternalIdentity-Ord : Ord InternalIdentity := Ord.mk compare;

  --- Implements the ;Eq; trait for ;InternalIdentity;.
  instance
  InternalIdentity-Eq : Eq InternalIdentity := fromOrdToEq;
end;

--- The Anoma backend does not support converting natural numbers to strings
instance
InternalIdentity-Show : Show InternalIdentity :=
  Show.mk \{id := "<<InternalIdentity>>"};
