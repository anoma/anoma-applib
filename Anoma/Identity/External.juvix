module Anoma.Identity.External;

import Stdlib.Prelude open;
import BaseLayer.AnomaAtom open;
import Anoma.Primitives.FixedSize open;
import Anoma.Builtin.ByteArray open using {
  ByteArray;
  toAnomaContents;
  fromAnomaContents;
};

--- A fixed-size data type describing an external identity.
type ExternalIdentity :=
  mk@{
    unExternalIdentity : ByteArray;
  }
with
  fromByteArray : ByteArray -> ExternalIdentity := ExternalIdentity.mk;

  fromAnomaAtom : AnomaAtom -> ExternalIdentity :=
    fromAnomaContents size >> fromByteArray;

  instance
  ExternalIdentity-FixedSize : FixedSize ExternalIdentity := FixedSize.mk size;

  size : Nat := 32;

  toByteArray : ExternalIdentity -> ByteArray :=
    ExternalIdentity.unExternalIdentity;

  toAnomaAtom : ExternalIdentity -> AnomaAtom := toByteArray >> toAnomaContents;

  toNat : ExternalIdentity -> Nat := toAnomaAtom >> AnomaAtom.toNat;

  deriving instance
  ExternalIdentity-Ord : Ord ExternalIdentity;

  deriving instance
  ExternalIdentity-Eq : Eq ExternalIdentity;

  instance
  ExternalIdentity-Show : Show ExternalIdentity :=
    Show.mk \{iden := "<<ExternalIdentity>>"};
end;
